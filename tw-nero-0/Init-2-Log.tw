:: Init 2 Log [inclusion] {"position":"2550,600","size":"100,100"}
<<append head>><style>

#log-button {
    background-color: #fff;
    border: 1px solid transparent;
    border-radius: 4px;
    color: #000;
    cursor: pointer;
    font-size: 18px;
    min-width: 2em;
    opacity: 0.1;
    padding: 2px 4px;
    position: fixed;
    right: 4px;
    text-align: center;
    top: 90px;
    z-index: 20;
}
#log-button:hover {
  background-color: #333;
  border-color: #eee;
  color: #eee;
  opacity: 1;
}

#log-outer {
  max-width: min(90vw, 40em);
}

#log-outer a {
  color: #aac;
  cursor: text;
}
#log-outer ul.actions a {
  color: #669;
}
#log-outer#log-outer a.log-next {
  color: #6ef;
}

#log-outer ul.actions li::before {
  filter: saturate(0);
}

#log-outer hr {
  border-color: #333;
}

#log-outer .random-walk-chosen {
  outline: none;
}

#log-outer .log-title {
  border-bottom: 1px solid #666;
  margin-bottom: 12px;
  text-align: right;
}

#log-outer .log-title span {
  background-color: #333;
  border: 1px solid #666;
  border-bottom: 0;
  border-radius: 6px 6px 0 0;
  color: #999;
  display: inline-block;
  font-size: 12px;
  opacity: 0.8;
  padding: 2px 6px;
}
#log-outer .log-title span:hover {
  border-color: #fff;
  background-color: #111;
  color: #fff;
  opacity: 1;
}

</style><</append>>

<<script>>
const MT = window.MagesTower || (window.MagesTower = {});

const KEY = "mt-log-1";
const KEY2 = "mt-log-2";
MT.log = [];

// current passage if in story, or latest story passage. 
MT.storyPosition = null;

// current passage, which might not be noreturn (not in story)
let here = {
  turn: -1,
  title: "",
};

function saveLog() {
  State.metadata.set(KEY, MT.log);
  State.metadata.set(KEY2, MT.storyPosition);
}

function initLog() {
  if (!setup.tester) return;
  MT.log = State.metadata.get(KEY) || [];
  MT.storyPosition = State.metadata.get(KEY2) || null;

  $("<div id=log-button>")
    .appendTo("#story")
    .text("log")
    .on("click", () => openLog());

  $(document).on(":passageinit", ev => {
    if ($("#story a[data-passage]").length === 1) {
      here.noChoice = true;
    }
    updateLog(ev.passage.title, MagesTower.mtaCode());
  });
  $(document).on(":passagestart", () => {
    here = { turn: State.turns, title: State.passage };
    const mtaCode = MagesTower.mtaCode();
    if (mtaCode != null) here.mtaCode = mtaCode;
    if (!tags().includes("noreturn")) {
      MT.storyPosition = here;
    }
  });
}

function updateLog(nextTitle, mtaCode) {
    if (here.turn < 0) return;

    const next = { title: nextTitle };
    next.turn = State.turns < here.turn ? State.turns : State.turns + 1;
    if (mtaCode != null) next.mtaCode = mtaCode;
    const dom = $(".passage");

    // Clear log when using a jump point, and don't record it.
    if (here.turn < next.turn && here.title === "n0/F Jump To") {
      MT.log = [];
      MT.storyPosition = null;
      saveLog();
      return;
    }

    // Don't record title screen
    if (here.title === "Title Screen") return;

    // Don't record motion from a "noreturn"
    if (Story.get(here.title).tags.includes("noreturn")) return;

    // Don't record motion to a "noreturn"
    if (Story.get(next.title).tags.includes("noreturn")) return;

    // Clear log at Bound (and record it).
    if (here.turn < next.turn && (here.title === "Bound" || next.title === "Bound")) {
      MT.log = [];
      saveLog();
    }

    record(here, next, dom);
}

function record(here, next, dom) {
  // backward or refresh
  if (next.turn <= here.turn) {
    MT.log = MT.log.filter(e => e.turn < next.turn);
    saveLog();
    return;
  }

  // No passage?
  if (dom.length !== 1) return;

  dom = dom.clone();
  dom.find(".random-walk-chosen").removeClass("random-walk-chosen");
  dom.find(".fade-in-hidden").removeClass("fade-in-hidden");
  dom.find(".fade-in-absorb").removeClass("fade-in-absorb");
  dom.find("[data-name=silently]").remove();
  dom.find(".patience-debug").remove();
  dom.find(".ro-debug").remove();
  dom.find(".debug").replaceWith(function() { return $(this).contents(); });

  let link = dom.find(`[data-passage="${next.title}"]`);
  if (link.length > 1 && next.mtaCode != null) {
    link = link.filter(`[data-mta-code="${next.mtaCode}"]`);
  }
  link.addClass("log-next");

  // remove trailing br
  while (dom[0] != null && dom[0].lastChild != null &&
    dom[0].lastChild.tagName === "BR"
  ) {
    dom[0].lastChild.remove();
  }

  const html = dom[0].outerHTML;
  const entry = { turn: here.turn, title: here.title, html };
  if (here.mtaCode) entry.mtaCode = here.mtaCode;
  if (here.noChoice) entry.noChoice = true;
  MT.log.push(entry);
  saveLog();
}

function openLog() {
  Dialog.setup("");
  const outer = $("<div id=log-outer>").appendTo(Dialog.body());
  let words = 0;
  MT.log.forEach((e, i) => {
    $("<div class=log-title>")
      .append($("<span>").text(e.title))
      .appendTo(outer);
    const section = $.parseHTML(e.html);
    outer.append(section);
    words += MagesTower.countWords($(section).text());
  });
  
  const json = JSON.stringify(MT.log);
  console.log({logJsonLength: json.length});
  const compressed = LZString.compressToBase64(json);

  const minutes = Math.round(words / 250);
  $("#ui-dialog-title")
      .append(`${words} words | ~${minutes} min`)
      .append(` | ${compressed.length} lz`);

  $("<a>&#x2191; </a>").prependTo("#ui-dialog-title")
    .on("click", () => {
      const divs  = $("#log-outer > div.log-title");
      if (divs.length) divs[0].scrollIntoView();
    });
  $("<a> &#x1f3b2;</a>").appendTo("#ui-dialog-title")
    .on("click", () => {
      const divs = $("#log-outer > div.log-title");
      if (divs.length) {
        // Should not use State.random()
        const i = Math.floor(divs.length * Math.random());
        divs[i].scrollIntoView();
      }
    });
  $("<a> &#x2193;</a>").appendTo("#ui-dialog-title")
    .on("click", () => {
      const divs = $("#log-outer > div.log-title");
      if (divs.length) divs[divs.length - 1].scrollIntoView();
    });

  Dialog.open();
}

initLog();
<</script>>
