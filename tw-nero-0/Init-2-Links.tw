:: Init 2 Links [inclusion] {"position":"2450,600","size":"100,100"}
<<script>>

/**
 * <<mta $link [$code]>>
 *   $text
 * <</mta>>
 * 
 * Similar to <<link $text $link>><<run $code>><</link>>
 * Allows double-bracket syntax for the link.
 * Adds a data-mt-code attribute for disambiguation.
 * Also arranges for the next passage to get the code as _mtaCode
 */
Macro.add("mta", {
  tags: [],
  handler: function() {
    const [link, code] = this.args;
    const text = this.payload[0].contents;
    makeLink(link, code, text)
      .appendTo(this.output);
  }
});

/**
 * <<mtl $link [$script]>>
 *   $text
 * <</mtl>>
 * 
 * <<mta>> but wrapped in <li></li>
 */
Macro.add("mtl", {
  tags: [],
  handler: function() {
    const [link, code] = this.args;
    const text = this.payload[0].contents;
    $("<li>").append(makeLink(link, code, text))
      .appendTo(this.output);
  }
});

function makeLink(link, code, text) {
  let body = "";
  if (code != null) {
    body = `<<run $mtaPayload = "${code}">><<run ${code}>>`;
  }
  const el = document.createDocumentFragment();
  State.temporary.mtaThisDest = linkTitle(link);
  State.temporary.mtaThisText = String(text);
  $(el).wiki(`<<link _mtaThisText _mtaThisDest>>${body}<</link>>`);
  if (code != null) {
    $(el).find("a").attr("data-mta-code", code);
  }
  return el;
}

function linkTitle(link) {
  if (link.isLink) return link.link;
  const str = String(link);
  const m = /^\[\[(?:[^|]+\|)?([^|]+)\]\]$/.exec(str);
  return m == null ? str : m[1];
}

$(document).on(":passagestart", () => {
  // Move $mtaPayload to _mtaCode so it doesn't persist further
  const T = State.temporary;
  const V = State.variables;
  if (V.mtaPayload != null) {
    T.mtaCode = V.mtaPayload;
    delete V.mtaPayload;
  }
})

/**
 * Returns the mta code for the link to here, or null.
 * This works regardless of passagestart ordering.
 */
MagesTower.mtaCode = () => {
  const T = State.temporary;
  const V = State.variables;
  return T.mtaCode || V.mtaPayload || null;
};

<</script>>
