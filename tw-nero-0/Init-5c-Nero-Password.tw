:: Init 5c Nero Password [inclusion] {"position":"3450,1000","size":"100,100"}
<<append head>><style>
#passages:not(.pw-debug-show) .pw-debug > :not(label) {
  display: none;
}
span.debug:has(> .pw-debug) + wbr + span.debug > .pw-debug > label {
  display: none;
}

</style><</append>>
<<script>>
const Nero = window.Nero || (window.Nero = {});
const VT = window.VarTrace || (window.VarTrace = {});
const sayPassword = "[[n1s-F Say Password]]".slice(2, -2);

/*
 * Passwords starting with "#" are from mf-pass.
 * Everything else should either be in basicPasswords or otherPasswords.
 */

Nero.basicPasswords = {
  "Ivex the Magnificent": "the egotistical choice",
  "Ransamaran Ivory": "the mage school that Ivex attended",
  "Password": "a common password",
};

Nero.otherPasswords = {
  /* books */
  "621": "the year that Ivex graduated from high school",
  // never succeed at getting high school name

  /* bottle */
  "Lance Rockhard": "the name of the enormous horse dildo",

  /* candle */
  "Red": "the color of the candle",
  "Blood": "another name for the candle's color",

  /* globe */
  "Carpe Diem": "the slogan on the pillar in the snow globe",
  "Caverns of Liskov": "a plausible source of Ivex's snow globe",
  "Caverns of Luminance": "the most likely source of Ivex's snow globe",

  /* map */
  "Uramos": "the circle marked on the map",
  // never succeed at identifying the X

  /* penguin */
  "Hunter Too": "the name of Ivex's penguin",

  /* painting */
  "Ivy": "the name of Ivex's mother",

  /* wand */
  "Fuck Toy 9000": "the name of Ivex's wand",
};

Nero.oldPasswords = {
  "Carpe Diem": "is not your password yet, ?master",
  "Ivex The Magnificent": "is obviously not your password, ?master",
  "Password": "is your mother's maiden name, not your password, ?master",
  "I'm Sorry To Interrupt": "was last year's password, ?master",
  "I Have A Question For You": "was last month's password, ?master",
};

let pwDebugAlready = false;
$(document).on(":passagestart", () => {
  pwDebugAlready = false;
});

/**
 * <<pw-found $pw>>
 * Add pw to passFound.
 * Can be used for things that Nero sees before he knows he needs a password.
 */
Macro.add("pw-found", {
  handler: function() {
    const [pw] = this.args;
    if (Nero.otherPasswords[pw] == null) {
      throw new Error(`pw-found ${pw} undeclared password`);
    }
    const V = State.variables;
    const found = V.n1_passFound || (V.n1_passFound = []);
    found.push(pw);
  }
});

/**
 * <<pw-suggest $pw1>>
 *     $storyText1
 * <<pw-another $pw2>>
 *     $storyText2
 * <<pw-fail>>
 *     $storyTextFail
 * <</pw-suggest>>
 * Only does something when wantPass or onHold.
 * The first pw that isn't in passTried gets added to passFound,
 * and the corresponding text gets shown.
 * The passwords are not added to passFound until their text is shown,
 * so if a context suggests several passwords at the same time,
 * use <<pw-found>>.
 * If all the passwords in the block have been tried, show pw-fail text.
 * Also adds an action to say the password.
 */
Macro.add("pw-suggest", {
  tags: ["pw-another", "pw-fail"],
  handler: function() {
    const V = State.variables;
    const wantPass = MP_wantPass === V.n1_magicPhase;
    const onHold = MP_onHold === V.n1_magicPhase
      || MP_exitingHold === V.n1_magicPhase;
    if (!wantPass && !onHold) return;

    // check that all clauses have declared passwords
    for (const p of this.payload) {
      if (p.name === "pw-fail") continue;
      const [pw] = p.args;
      if (Nero.otherPasswords[pw] == null) {
        throw new Error(`${payload.name} ${pw} undeclared password`);
      }
    }

    const tried = V.n1_passTried || (V.n1_passTried = []);
    const found = V.n1_passFound || (V.n1_passFound = []);

    let allFailed = true;
    for (const p of this.payload) {
      if (p.name === "pw-fail") continue;
      const [pw] = p.args;
      if (tried.includes(pw)) continue;

      allFailed = false;
      if (!found.includes(pw)) found.push(pw);
      $(this.output).wiki(p.contents);
      if (wantPass) {
        const text =`Tell the Sprite, "${pw}".`;
        const code = `$t_passToTry = "${pw}"`;
        Nero.actionsAdd("[" + `[\`${text}\`|${sayPassword}][${code}]]`);
      } else {
        $(this.output).append(
          `Nero will have to remember to try it when the
          Sprite is ready for another guess.`);
      }
      break;
    }

    if (allFailed) {
      const p = this.payload.find(p => p.name === "pw-fail");
      if (p !== null) $(this.output).wiki(p.contents);
    }

    if (setup.debug) {
      let debug = !!session.get("pw-debug");
      $("#passages").toggleClass("pw-debug-show", debug);
      const outer = $("<span class=pw-debug>").appendTo(this.output);
      $("<label>").append(" &#x1f527;").appendTo(outer)
        .click(() => {
          debug = !debug;
          session.set("pw-debug", debug);
          $("#passages").toggleClass("pw-debug-show", debug);
        });
      if (!pwDebugAlready) {
        pwDebugAlready = true;
        $("<a>").text(" (reset)").appendTo(outer)
          .on("click", () => VarInfo.revisitHere(() => {
            const V = State.variables;
            const tried = V.n1_passTried || (V.n1_passTried = []);
            tried.length = 0;
          }));
      }
      for (const p of this.payload) {
        if (p.name === "pw-fail") continue;
        const [pw] = p.args;
        if (tried.includes(pw)) continue;
        $("<a>").text(` (try ${pw})`).appendTo(outer)
          .on("click", () => VarInfo.revisitHere(() => {
            const V = State.variables;
            const tried = V.n1_passTried || (V.n1_passTried = []);
            tried.push(pw);
          }));
      }
    }
  }
});

/** True if Nero is waiting for another password attempt. */
Nero.passAgainSoon = () => {
  const V = State.variables;
  const mp = V.n1_magicPhase;
  if (MP_onHold === mp || MP_exitingHold === mp) {
    return V.n1_passTried != null && V.n1_passTried.length !== 3;
  }
  return false;
};

/** True if Nero is looking for a password. */
Nero.passWanted = () => {
  const V = State.variables;
  const mp = V.n1_magicPhase;
  if (MP_wantPass === V.n1_magicPhase) return true;
  return Nero.passAgainSoon();
};

<</script>>
