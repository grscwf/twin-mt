:: Init Visited Passages [inclusion] {"position":"2175,800","size":"100,100"}
<<append head>><style>

@media(hover: none) {
  a.vp-link-visited,
  a.vp-link-visited:hover {
    opacity: 0.8;
    text-decoration: line-through;
  }
}
@media(hover: hover) {
  #passages:hover a.vp-link-visited {
    opacity: 0.8;
    text-decoration: line-through;
  }
}

</style><</append>>
<<script>>

const LZ = LZString;

const persist = window.localStorage;
const KEY = "vp-1";
const FLAG = "vp-marks-enabled";

let visited = new Set();

let marksEnabled = false;

MT.visitedMarksEnabled = () => marksEnabled;
MT.visitedEnableMarks = val => {
  marksEnabled = val;
  persist.setItem(FLAG, JSON.stringify(val));
}

MT.visitedHas = title => visited.has(title);

MT.visitedClear = () => {
  visited = new Set();
  persist.removeItem(KEY);
};

function add(title) {
  visited.add(title);
  save();
};

function load() {
  visited = new Set();
  const str = persist.getItem(KEY);
  if (str != null) {
    const json = LZ.decompressFromBase64(str);
    if (json != null && json !== "") {
      const list = JSON.parse(json);
      visited = new Set(list);
    }
  }
}

function save() {
  const list = Array.from(visited).sort();
  const json = JSON.stringify(list);
  const str = LZ.compressToBase64(json);
  persist.setItem(KEY, str);
}

function initVisited() {
  if (!setup.debug) return;
  load();
  marksEnabled = !!JSON.parse(persist.getItem(FLAG) || "false");
  $(document).on(":passageend", () => {
    if (/^n/.test(State.passage)) add(State.passage);
    if (marksEnabled) {
      $("#passages a[data-passage]").each((i, el) => {
        const title = $(el).attr("data-passage");
        if (/^n/.test(title) && visited.has(title)) {
          $(el).addClass("vp-link-visited");
        }
      });
    }
  });
}

initVisited();

<</script>>
