:: Init 5c Nero Keyword [inclusion] {"position":"3300,1200","size":"100,100"}
<<script>>
const EM = window.ErrorMessage || (window.ErrorMessage = {});

Nero.keywords = {
  antimagic: {
    title: "Anti-Magic Fields",
    passages: [
      "[[n1s/F Anti-magic 1]]",
      "[[n1s/F Anti-magic 2]]",
    ],
  },
  
  dream: {
    title: "Dream Crystals",
    passages: [
      "[[n1x/F Dream Crystals 1]]",
      "[[n1x/F Dream Crystals 2]]",
    ],
  },

  endgame: {
    title: "Nero's Endgame",
    passages: [
      "[[n1s/F Endgame Info 1]]",
      "[[n1s/F Endgame Info 2]]",
    ],
  },
  
  gravity: {
    title: "Gravity Crystals",
    passages: [
      "[[n1x/F Gravity Crystals 1]]",
      "[[n1x/F Gravity Crystals 2]]",
    ],
  },
  
  itch: {
    title: "Superb Itch",
    passages: [
      "[[n1s/F Itch 1]]",
      "[[n1s/F Itch 2]]",
      "[[n1s/F Itch 3]]",
    ],
  },
  
  ivex: {
    title: "Ivex the Magnificent",
    passages: [
      "[[n1cn/F Ivex Desc]]",
    ],
  },
  
  kelvin: {
    title: "Kelvin the Elder",
    passages: [
      "[[n1x/F Kelvin 1]]",
      "[[n1x/F Kelvin 2]]",
      "[[n1x/F Kelvin 3]]",
      "[[n1x/F Kelvin 4]]",
      "[[n1x/F Kelvin 5]]",
      "[[n1x/F Kelvin 6]]",
      "[[n1x/F Kelvin 7]]",
    ],
  },
  
  kopic: {
    title: "Kopic Wands",
    passages: [
      "[[n2x/F Kopic]]",
    ],
  },
  
  mc: {
    title: "Mind Control",
    passages: [
      "[[n1cr/F Mind Control]]",
    ],
  },
  
  mcInhibition: {
    title: "Mind Control: Inhibition",
    passages: [
      "[[n1cr/F Inhibition 1]]",
    ],
  },
  
  mcRepression: {
    title: "Mind Control: Repression",
    passages: [
      "[[n1cr/F Repression 1]]",
    ],
  },
  
  mcSubstitution: {
    title: "Mind Control: Substitution",
    passages: [
      "[[n1cr/F Substitution 1]]",
    ],
  },
  
  mica: {
    title: "Mica Teboren",
    passages: [
      "[[n1p/F Mica Extra 1]]",
      "[[n1p/F Mica Extra 2]]",
      "[[n1p/F Mica Extra 3]]",
    ],
  },
  
  nackle: {
    title: "Nackle's Poltergeist Device",
    passages: [
      "[[n1x/F Nackle 1]]",
      "[[n1x/F Nackle 2]]",
      "[[n1x/F Nackle 3]]",
    ],
  },
  
  oil: {
    title: "Oil of Dragons",
    passages: [
      "[[n1s/F Oil Info]]",
    ],
  },
  
  pearson: {
    title: "Pearson's Hangover Cantrip",
    passages: [
      "[[n1a/F Hangover Info]]",
    ],
  },
  
  pevhin: {
    title: "Lord Pevhin and Lady Temesca",
    passages: [
      "[[n1p/F Barbs Fast 3]]",
      "[[n1p/F Barbs Fast 4]]",
      "[[n1p/F Barbs Fast 5]]",
    ]
  },
  
  pyron: {
    title: "Pyron Nodes",
    passages: [
      "[[n1s/F Pyron Node]]",
    ],
  },
  
  sprite: {
    title: "Magic Sprites",
    passages: [
      "[[n1s/F Sprite Info 1]]",
      "[[n1s/F Sprite Info 2]]",
    ],
  },
  
  tigerMyth: {
    title: "Strange Tiger (Myth)",
    passages: [
      "[[n1p/F Barbs Slow 4]]",
      "[[n1p/F Barbs Slow 5]]",
      "[[n1p/F Barbs Slow 6n1]]",
      "[[n1p/F Barbs Slow 6n2]]",
    ],
  },
  
  tigerSharp: {
    title: "Strange Tiger (Sharp)",
    passages: [
      "[[n1p/F Barbs Slow 4]]",
      "[[n1p/F Barbs Slow 5]]",
      "[[n1p/F Barbs Slow 6y1]]",
      "[[n1p/F Barbs Slow 6y1]]",
    ],
  },
  
  younger: {
    title: "Younger's Escape",
    passages: [
      "[[n1s/F Younger Info 1]]",
      "[[n1s/F Younger Info 2]]",
      "[[n1s/F Younger Info 3]]",
    ],
  },
};

function obscure(i, kw) {
  return kw.title;
  if (kw.reveal) return "";
  return kw.title.replace(/[^A-Z ]/g, " . ");
}

Nero.kwCount = () => {
  const V = State.variables;
  let mkp = "<<nobr>>";
  let unlocked = 0;
  const keys = Object.keys(Nero.keywords);
  for (const key of keys) {
    const vn = `n9_kw_${key}`;
    if (V[vn]) unlocked++;
  }
  const reveal = V.n9_escaped || unlocked === keys.length;
  const total = reveal ? keys.length : "?";
  mkp += `(${unlocked} of ${total})`;
  mkp += "<</nobr>>";
  return mkp;
};

Nero.listKeywords = () => {
  const V = State.variables;
  const T = State.temporary;
  let mkp = "<<nobr>>";
  const keys = Object.keys(Nero.keywords);
  keys.sort((a, b) => {
    const at = Nero.keywords[a].title;
    const bt = Nero.keywords[b].title;
    return at < bt ? -1 : at > bt ? +1 : 0;
  });
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const kw = Nero.keywords[key];
    const vn = `n9_kw_${key}`;
    if (!V.n9_escaped && !V[vn] && !T.lockpick) continue;
    const hidden = obscure(i, kw);
    mkp += `<<arc-ending $` + `n9_kw_${key}`;
    mkp += ` [\[${kw.title}|n0/F Nero Keyword]]`;
    mkp += ` "${hidden}" "$t_keyword = '${key}'">>`;
    mkp += `<</arc-ending>>\n`;
  }
  mkp += "<</nobr>>";
  return mkp;
};

Nero.showKeyword = key => {
  const kw = Nero.keywords[key];
  if (kw == null) return `Unknown keyword ${key}`;
  
  let mkp = "<<nobr>>";
  mkp += `<div class=ui-title>${kw.title}</div>\n`;
  mkp += `<hr>\n`;
  for (let i = 0; i < kw.passages.length; i++) {
    if (i !== 0) mkp += "<hr>\n";
    mkp += `<<arc-include ${kw.passages[i]}>>\n`;
  }
  mkp += "<</nobr>>";
  return mkp;
}

/**
 * <<nero-kw kwname>>
 * If kwname is locked, set it to unlock at the next nero-kw-announce.
 */
Macro.add("nero-kw", {
  handler: function() {
    const [key] = this.args;
    const kw = Nero.keywords[key];
    if (kw == null) throw new Error(`nero-kw ${key} not found`);
    
    const V = State.variables;
    const vn = `n9_kw_${key}`;
    if (!V[vn]) {
      if (V.t_kwAnnounce != null) {
        throw new Error(`conflicting kw announce ${key} ${V.t_kwAnnounce}`);
      }
      V.t_kwAnnounce = key;
      State.temporary.kwUnlocking = true;
    }
  }
});

/**
 * <<nero-kw-announce>>
 * If a kw unlock is pending, do it, and announce it.
 */
Macro.add("nero-kw-announce", {
  handler: function() {
    const V = State.variables;
    const key = V.t_kwAnnounce;
    if (key == null) return;
    
    delete V.t_kwAnnounce;
    const kw = Nero.keywords[key];
    if (kw == null) throw new Error(`nero-kw-announce ${key} not found`);

    const vn = `n9_kw_${key}`;
    V[vn] = true;

    $(this.output).wiki(
      `<meta-text>\
        The Archives have unlocked Keyword: ${kw.title}.\
      </meta-text>\
      ?P`);
  }
});

$(document).on(":passageend", () => {
  const T = State.temporary;
  const V = State.variables;
  if (!T.kwUnlocking && V.t_kwAnnounce != null) {
    EM.fail(`missing nero-kw-announce for ${V.t_kwAnnounce}`);
  }
});

<</script>>\
