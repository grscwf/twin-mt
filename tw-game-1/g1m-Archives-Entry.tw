:: g1m Archives Entry [is-menu] {"position":"375,1325","size":"100,100"}
<<nobr>>

<<sticky-return-and>>
  <span class=mt-vsep>||</span>
  [[Return to the Archives|g1m Archives]]
<</sticky-return-and>>

<<script>>

const T = State.temporary;
const V = State.variables;

const arcEntry = V.g_arcChoice;
const { name, barbs, freeze } = arcEntry;

T.notesVariant = name;

const info =
  MT.drekkarEndings[name] ||
  MT.neroEndings[name] ||
  MT.neroKeywords[name];

if (info == null || info.title == null) {
  throw new Error(`Unknown archive entry ${name}`);
}

let title = info.title;
title = title.replace(/%barbs\b/, barbs ? "Barbed" : "Smooth");
title = title.replace(/%freeze\b/, freeze ? "Freeze" : "Shock");

$(output).wiki(
  `<<sticky-head>>`
  + `<div class=ui-title>${title}</div>`
  + `<</sticky-head>>`);

const code = `
  $g_arcName = "${name}";
  $n_barbs = ${barbs};
  $n_castEndgame = ${V.n_castEndgame};
`;

const vars = {
  g_arcName: name,
  g_rand0: 1636094642, /* arbitrary */
  g_rand1: 173183867,
  n_barbs: barbs,
  n_castEndgame: V.n_castEndgame,
};
const temps = {
  isArchive: true,
};

info.passages.forEach((passage, i) => {
  if (i !== 0) {
    $("<hr class=text-sep>").appendTo(output);
  }
  if (typeof passage === "function") {
    passage = passage(arcEntry);
  }

  MT.tran.renderPage({
    title: passage,
    vars,
    temps,
  }).appendTo(output);

  if (i + 1 < info.passages.length) {
    let next = info.passages[i + 1];
    if (typeof next === "function") {
      next = next(arcEntry);
    }
    const text = Story.get(passage).text;
    if (!text.includes(next)) {
      MT.warn(`[\[${passage}]] does not link to [\[${next}]]`);
    }
  }
});

<</script>>

<</nobr>>
