:: g1m Notes Popup [inclusion] {"position":"350,2500","size":"100,100"}
<<nobr>>
<<script>>
  const T = State.temporary;
  const V = State.variables;
  const noteStore = window.sessionStorage;

  T.savedVal = "";
  T.editVal = "";
  T.hasConflict = false;

  $(document).one(":dialogopening", () => {
    $("#NP-input").on("input", onInput);
    restoreSession();
    appendSelected();
    appendMessages();
    uiUpdate();
  });

  $(document).one(":dialogopened", () => {
    $("#NP-input").focus();
  });

  function appendQuoted(text) {
    text = text.trim();
    if (text === "") return;
    const q = text.replace(/^/gm, "-> ") + "\n";
    let val = T.editVal.trim();
    if (val !== "" && val.slice(-1) !== "\n") {
      val += "\n";
    }
    val += q;
    $("#NP-input").val(val);
    saveValue(val);
  }

  function appendSelected() {
    if (MT.selectedText == null || MT.selectedText === "") return;
    appendQuoted(MT.selectedText);
  }
  function appendMessages() {
    if (MT.messages != null && MT.messages.length) {
      appendQuoted(MT.messages.join("\n"));
    }
  }

  function restoreSession() {
    T.savedVal = MT.notesGet(V.n_notesOrigin);
    T.editVal = noteStore.getItem("notes-single:" + V.n_notesOrigin)
      || T.savedVal;
    $("#NP-input").val(T.editVal);
    T.hasConflict = T.savedVal.trimEnd() !== T.editVal.trimEnd();
  }

  function uiUpdate() {
    $("#NP-conflict").toggleClass("NP-conflict-hidden", !T.hasConflict);
  }

  function onInput(ev) {
    saveValue($("#NP-input").val(), false);
  }

  function saveValue(val, overwrite) {
    T.editVal = val;
    if (overwrite || !T.hasConflict) {
      T.savedVal = MT.notesTryReplace(V.n_notesOrigin, T.savedVal, T.editVal);
    }
    T.hasConflict = T.savedVal.trimEnd() !== T.editVal.trimEnd();
    const key = "notes-single:" + V.n_notesOrigin;
    if (T.hasConflict) {
      noteStore.setItem(key, val);
    } else {
      noteStore.removeItem(key);
    }
    uiUpdate();
  }

  T.addCurrentState = () => {
    const wasRead = [...MT.trace.wasRead].sort();
    const obj = {};
    for (const vn of wasRead) {
      const val = State.current.variables[vn];
      if (val != null) obj[vn] = val;
    }
    const json = JSON.stringify(obj);
    const text = `enterState = ${json}`;
    const newVal = T.editVal + "\n" + text;
    $("#NP-input").val(newVal);
    saveValue(newVal, false);
  }
<</script>>
<style>
  .NP-subtitle {
    font-size: 1.1em;
    font-weight: bold;
    margin: 0 0 0.5em 0;
  }
  #NP-input {
    min-width: 10em;
    width: calc(100% - 1em);
  }
  .NP-conflict-hidden {
    display: none;
  }
  .NP-conflict-important {
    color: #fe9;
    font-size: 1.1em;
    font-weight: bold;
  }
  #ui-dialog-body a {
    display: inline-block;
    margin-top: .5em;
  }
</style>
<div class=NP-subtitle>
    Notes for [page $n_notesOrigin]
</div>
<textarea id=NP-input rows="8" placeholder="Enter text here"></textarea>
<br>
<div id=NP-conflict>
  <div class=NP-conflict-important>
    Notes for this page has an edit conflict!
  </div>
  [[See conflict|g1m Notes Single][Dialog.close()]]
</div>
<<link "Append a summary of the current state">>
  <<run _addCurrentState()>>
<</link>>
<br>
[[View all notes|g1m Notes All][Dialog.close()]]
<br>
<</nobr>>
