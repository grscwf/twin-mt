:: Init 2 Enum Type [inclusion] {"position":"2950,500","size":"100,100"}
<<script>>
const ET = window.EnumType || (window.EnumType = {});

ET.enums = {};
ET.vars = {};

/**
 * Define an enum. Value names are added as window globals,
 * so that typoing an enum value will throw an error.
 */
ET.define = (enumName, valueNames) => {
  ET.enums[enumName] = valueNames;
  valueNames.forEach((n, i) => window[n] = i);
};

ET.declareVar = (varName, enumName) => {
  if (!ET.enums[enumName]) throw new Error(`No enum named ${enumName}`);
  ET.vars[varName] = enumName;
};

ET.symbolic = (name, value) => {
  const en = ET.enums[ET.vars[name] || name];
  return en == null ? value : (en[value] || value);
};
<</script>>
