:: g0init Checkpoint [inclusion] {"position":"425,1000","size":"100,100"}
<<script>>

/**
 * <<checkpoint-save varName>>
 * Stores current state in varName.
 */
Macro.add("checkpoint-save", {
  handler: function() {
    const [varName] = this.args[0];
    MT.untraced(() => {
      const save = State.marshalForSave();
      State.variables[varName] = JSON.stringify(save);
    });
  }
});

/**
 * <<checkpoint-load varName>>
 * Returns to state stored in varName.
 */
Macro.add("checkpoint-load", {
  handler: function() {
    const [varName] = this.args[0];
    const state = JSON.parse(State.variables[varName]);
    State.unmarshalForSave(state);
  }
});

/**
 * <<state-delete prefix1 ...>>
 * Deletes all state vars whose names start with any of the prefixes.
 * XXX delete this @obsolete
 */
Macro.add("state-delete", {
  handler: function() {
    const prefixes = this.args;
    const V = State.variables;
    for (const key of Object.keys(V)) {
      for (const p of prefixes) {
        if (key.startsWith(p)) {
          delete V[key];
          break;
        }
      }
    }
  }
});

/**
 * <<state-save varName prefix1 ...>>
 * Saves into varName all state vars whose names start with any prefix.
 * XXX delete this @obsolete
 */
Macro.add("state-save", {
  handler: function() {
    const dest = this.args[0];
    const prefixes = this.args.slice(1);
    const V = State.variables;
    const save = {};
    for (const key of Object.keys(V)) {
      if (key === dest) continue;
      for (const p of prefixes) {
        if (key.startsWith(p)) {
          save[key] = MT.untracedGet(key);
          break;
        }
      }
    }
    V[dest] = save;
  }
});

/**
 * <<state-load varName>>
 * Restore state vars from varName.
 * XXX delete this @obsolete
 */
Macro.add("state-load", {
  handler: function() {
    const src = this.args[0];
    const V = State.variables;
    const saved = V[src];
    if (saved == null || typeof saved !== "object") {
      console.warn(`no saved state named ${src}`);
      return;
    }
    for (const key of Object.keys(saved)) {
      V[key] = saved[key];
    }
  }
});
<</script>>
