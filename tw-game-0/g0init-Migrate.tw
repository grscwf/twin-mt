:: g0init Migrate [inclusion] {"position":"700,575","size":"100,100"}
<<script>>

function deleteUnknownMetadata() {
  for (const [k, v] of MT.mdEntries()) {
    if (!MT.mdKnown(k)) {
      MT.diag("Warning: unknown metadata:", k);
    }
  }
  MT.diagReport();
}

function deleteOldStorage() {
  session.delete("mt-log-1");
  localStorage.removeItem("vp-1");
  localStorage.removeItem("vp-marks-enabled");
}

function migrateMetadata() {
  const rec = MT.mdRecord();
  const rename = (from, to) => {
    if (rec[from] != null && rec[to] == null) {
      State.metadata.set(to, rec[from]);
      State.metadata.delete(from);
    }
  };
  const remove = name => {
    if (rec[name] != null) {
      State.metadata.delete(name);
    }
  }

  remove("mn_playerLostEndgame");

  rename("mg_notesNoTrail", "mi_notesNoTrail");
  rename("mg_notesNoTrailTimes", "mi_notesNoTrailTimes");
  rename("mg_trail", "mi_trail");
  rename("notes", "mi_notes");
}

function migrateNotes() {
  const original = State.metadata.get("mi_notes") || "";
  let fixed = original;
  // migrate [passage] to [page]
  fixed = fixed.replace(/^(\[passage\s)/gm, "[page ");
  if (fixed !== original) {
    State.metadata.set("mi_notes", fixed);
  }
}

function migrateInit() {
  deleteOldStorage();
  migrateMetadata();
  migrateNotes();
  // has to be run late, after all the mdDef* calls
  $(document).on(":storyready", deleteUnknownMetadata);
}

migrateInit();

/*
 * Sketch of general saved-data migration.
 *
 * If story structure is changed, saved games and current-session will
 * need to be fixed to fit the new structure.
 *
 * Structure changes include: renaming a passage, renaming a state var,
 * renaming a metadata var.
 *
 * Saved games can be fixed with a `Save.onLoad.add(save => ...)` hook:
 * - for metadata, look in g0boot-Metadata `readFromSave`
 * - save.state is an expanded snapshot. see below.
 *
 * Current session needs to be fixed in an init script, before it's loaded.
 * - session.get("state") is a compact snapshot. see below.
 * - fix it, and write it back with session.set("state", state);
 * 
 * Fixing a snapshot named `state`
 * - expanded snapshot has state.history
 * - compact snapshot has state.delta
 *   - use State.decodeDelta(state.delta) to get the flat history
 * - for each moment in the flat history
 *   - fix moment.title (passage name)
 *   - fix var names in moment.variables
 *   - if moment.variables has snapshots, recursively fix them
 */

<</script>>
