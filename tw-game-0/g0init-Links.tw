:: g0init Links [inclusion] {"position":"2450,600","size":"100,100"}
<<append head>><style>
.mtl-denied::before {
  filter: grayscale();
}
.mtl-denied .mtl-action {
  color: #999;
  text-decoration: line-through;
  text-decoration-color: #999;
  text-decoration-thickness: 1px;
}
.mtl-denied .mtl-reason {
  color: #999;
  margin-left: 0.5em;
  font-style: italic;
}
</style>
<</append>>


<<script>>

/**
 * <<mta $link [$code]>>
 *   $text
 * <</mta>>
 * 
 * Similar to <<link $text $link>><<run $code>><</link>>
 * Allows double-bracket syntax for the link.
 * Adds a data-mt-code attribute for disambiguation.
 * Also arranges for the next passage to get the code as _mtaCode
 */
Macro.add("mta", {
  tags: [],
  handler: function() {
    const [link, code] = this.args;
    const text = this.payload[0].contents;
    $(makeLink(link, code, text))
      .appendTo(this.output);
  }
});

/**
 * <<mtl $link [$script]>>
 *   $text
 * <</mtl>>
 * 
 * <<mta>> but wrapped in <li></li>
 */
Macro.add("mtl", {
  tags: [],
  handler: function() {
    const [link, code] = this.args;
    const text = this.payload[0].contents;
    $("<li>").append(makeLink(link, code, text))
      .appendTo(this.output);
  }
});

/**
 * <<mtl-if $bool $link [$reason]>>
 *   $text
 * <</mtl>>
 * 
 * <<mtl>> but only if $bool.
 * Otherwise, show it as unavailable, with $reason
 */
Macro.add("mtl-if", {
  tags: [],
  handler: function() {
    const [expr, link, reason] = this.args;
    const text = this.payload[0].contents;
    const bool = typeof expr === 'boolean' ? expr
      : Scripting.evalTwineScript(expr);
    if (bool) {
      $("<li>").append(makeLink(link, null, text))
        .appendTo(this.output);
    } else {
      const li = $("<li class=mtl-denied>").appendTo(this.output);
      $("<span class=mtl-action>").wiki(text.trim()).appendTo(li);
      if (reason != null && reason !== "") {
        $("<span class=mtl-reason>").text(`(${reason})`).appendTo(li);
      }
    }
  }
});

/**
 * <<mtl-denied $text [$reason]>>
 *
 * Show an unavailable action.
 */
Macro.add("mtl-denied", {
  handler: function() {
    const [text, reason] = this.args;
    const li = $("<li class=mtl-denied>").appendTo(this.output);
    $("<span class=mtl-action>").wiki(text.trim()).appendTo(li);
    if (reason != null && reason !== "") {
      $("<span class=mtl-reason>").text(`(${reason})`).appendTo(li);
    }
  }
});

function makeLink(link, code, text) {
  const el = document.createDocumentFragment();
  const dest = linkTitle(link);
  State.temporary.mtaThisText = String(text);

  let body = "";
  if (code != null) {
    body = `<<run $mtaPayload = ["${dest}","${code}"]; ${code}>>`;
  }
  $(el).wiki(`<<link _mtaThisText "${dest}">>${body}<</link>>`);
  if (code != null) {
    $(el).find("a").attr("data-mta-code", code);
  }
  return el;
}

function linkTitle(link) {
  if (link.isLink) return link.link;
  const str = String(link);
  const m = /^\[\[(?:[^|]+\|)?([^|]+)\]\]$/.exec(str);
  return m == null ? str : m[1];
}

/** Returns the mta code for the link to here, or null. */
MT.mtaCode = (here) => {
  here ||= State.passage;
  const p = State.variables.mtaPayload;
  if (p == null || p[0] !== here) return null;
  return p[1];
};

<</script>>
