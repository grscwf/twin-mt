:: g0init Transcript [inclusion] {"position":"250,725","size":"100,100"}
<<append head>><style>

#tran-outer a {
  color: #aac;
  cursor: text;
}
#tran-outer ul.actions a {
  color: #669;
}
#tran-outer#tran-outer a.tran-next {
  color: #6ef;
}

#tran-outer ul.actions li::before {
  filter: saturate(0);
}

#tran-outer hr {
  border-color: #333;
}

#tran-outer .random-walk-chosen {
  outline: none;
}

</style><</append>>

<<script>>

function cleanHtml(jq, nextTitle, nextCode) {
  jq.removeClass("passage-in");
  jq.find(".random-walk-chosen").removeClass("random-walk-chosen");
  jq.find(".fade-in-hidden").removeClass("fade-in-hidden");
  jq.find(".fade-in-absorb").removeClass("fade-in-absorb");
  jq.find(".tame-hide").removeClass("tame-hide");
  jq.find(".tran-remove").remove();
  jq.find("[data-name=silently]").remove();
  jq.find(".patience-debug").remove();
  jq.find(".ro-debug").remove();
  jq.find(".debug").replaceWith(function() { return $(this).contents(); });

  // highlight the link followed.
  if (nextTitle != null) {
    let link = jq.find(`a[data-passage="${nextTitle}"]`);
    if (link.length > 1 && nextCode != null) {
      link = link.filter(`[data-mta-code="${nextCode}"]`);
    }
    link.addClass("tran-next");
  }

  // remove trailing br
  while (jq[0].lastChild != null && jq[0].lastChild.tagName === "BR") {
    jq[0].lastChild.remove();
  }
}

MT.tranRender = output => {
  const outer = $("<div id=tran-outer>").appendTo(output);

  const hist = MT.getHistory();
  let turn = 0;

  const renderSome = () => {
    const batch = 10;
    const stop = Math.min(turn + batch, hist.length);

    const savedVars = State.active.variables;
    const savedTemp = Object.entries(State.temporary);
    try {
      for (; turn < stop; turn++) {
        const moment = hist[turn];

        if (turn !== 0) {
          $("<hr class=text-sep>").appendTo(outer);
        }

        const text = Story.get(moment.title).text;
        State.active.variables = clone(moment.variables);
        State.clearTemporary();
        const div = $("<div class=tran-entry>");
        MT.suppressErrors(() => {
          div.wiki(text);
        });
        cleanHtml(div);
        // clone to remove event handlers
        const copy = div.clone();
        $(outer).append(copy);
      }
    } finally {
      State.active.variables = savedVars;
      State.clearTemporary();
      for (const [k, v] of savedTemp) {
        State.temporary[k] = v;
      }
    }
  };

  const renderLoop = () => {
    renderSome();
    if (turn < hist.length) {
      setTimeout(renderLoop);
    } else {
      const words = MT.countWords($(outer).text());
      const passages = hist.length;
    }
  };
  
  renderLoop();
}

<</script>>
