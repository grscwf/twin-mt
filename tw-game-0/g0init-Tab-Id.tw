:: g0init Tab Id [inclusion] {"position":"775,1100","size":"100,100"}
<<script>>
/*
 * A tabId is a small integer identifying the current tab,
 * distinct from other tabs playing the same game.
 *
 * The complication is:
 * - If the player duplicates a tab, one of the tabs should
 *   get a new tab id.
 * - If the player reloads a tab, the tab should usually keep
 *   the same tab id.
 */

let tabId = null;
const myLease = Date.now();

/* This should be small, but larger than the expected number of open tabs. */
const MAX_LEASES = 20;

function getLeases() {
  let leases = JSON.parse(localStorage.getItem("tabIdLeases") || "null");
  leases ??= { min: 0, values: [] };
  if (leases.min == null) {
    leases = { min: 0, values: leases };
  }
  return leases;
}

function newLease(leases) {
  if (leases.values.length >= MAX_LEASES) {
    /* force everyone to get new ids */
    leases.min += leases.values.length;
    leases.values = [];
  }
  return leases.min + leases.values.length;
}

function claimLease(id, value, leases) {
  if (id >= leases.min) {
    leases.values[id - leases.min] = value;
  }
  localStorage.setItem("tabIdLeases", JSON.stringify(leases));
  sessionStorage.setItem("tabId", JSON.stringify(id));
}

function leaseIsValid(id, value, leases) {
  return id >= leases.min && leases.values[id - leases.min] === value;
}

/* on page load */
function tabIdInit() {
  const leases = getLeases();
  tabId = JSON.parse(sessionStorage.getItem("tabId") || "null");
  tabId ??= newLease(leases);
  claimLease(tabId, myLease, leases);
}

MT.getTabId = () => {
  const leases = getLeases();
  if (!leaseIsValid(tabId, myLease, leases)) {
    tabId = newLease(leases);
    claimLease(tabId, myLease, leases);
  }
  return tabId;
};

tabIdInit();

<</script>>
