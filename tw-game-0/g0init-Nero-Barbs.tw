:: g0init Nero Barbs [inclusion] {"position":"1125,1200","size":"100,100"}
<<script>>

function announceBarbs(dest) {
  const V = State.variables;
  V.n_announceBarbsSoon = false;
  V.n_barbsChoiceMade = true;

  if (!V.n_glitched) {
    MT.mdSet("mg_barbsNo", !V.n_barbs);
    MT.mdSet("mg_barbsYes", V.n_barbs);
  }

  const text = V.n_glitched ? "Barbs?" : V.n_barbs ? "Barbs" : "Smooth";
  $(dest).wiki(`<meta-text>Story Variant: ${text}</meta-text>?P`);
}

Macro.add("barbs-announce", {
  handler: function() {
    if (this.args.length !== 1) throw new Error("expected 1 arg");
    const V = State.variables;
    switch (this.args[0]) {
    case "now":
      announceBarbs(this.output);
      break;
    case "soon":
      V.n_announceBarbsSoon = true;
      return;
    case "maybe":
      if (V.n_announceBarbsSoon) announceBarbs(this.output);
      break;
    default:
      throw new Error(`Unexpected arg ${this.args[0]}`);
    }
  }
});

/** True if Nero side has canine knots */
MT.impliedKnot = () => {
  const V = State.variables;

  // make sure we're ambiguous before player makes a barb choice
  if (!V.n_barbsChoiceMade) {
    throw new Error("knot indeterminate");
  }

  // if player has expressed a knot choice in Drekkar, use it.
  // otherwise match the barb choice
  if (V.mg_knotNo || V.mg_knotYes) {
    return V.mg_knotYes;
  } else {
    return V.n_barbs;
  }
};

/** True if Drekkar side has feline barbs */
MT.impliedBarbs = () => {
  const V = State.variables;

  // make sure we're ambiguous before player makes a knot choice
  if (!V.d_knotChoiceMade) {
    throw new Error("barbs indeterminate");
  }

  // if player has expressed a barbs choice in Nero, use it.
  // otherwise match the knot choice
  if (V.mg_barbsNo || V.mg_barbsYes) {
    return V.mg_barbsYes;
  } else {
    return V.d_knot;
  }
};

<</script>>
