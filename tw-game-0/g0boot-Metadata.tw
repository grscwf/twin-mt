:: g0boot Metadata [inclusion] {"position":"235,425","size":"100,100"}
<<script>>

/**
 * State.metadata vars that do not get added to saved games.
 */
const unsavedVars = new Set([
  // Game persistent state
  "gmPassedContentWarning",
  "gmTitleSeen",

  // Nero persistent state
  "neIvexRememberedEndgame",
  "nePlayerLeftStudy",
  "nePlayerLeftStudyWithMirror",
  "nePlayerReadGlitch",

]);

/**
 * State.metadata vars that are saved and loaded from saved games.
 */
const savedVars = new Set([
  // Drekkar endings
  "dxEnthrallment",
  "dxEnthrallmentLion",
  "dxExtractionGentle",
  "dxExtractionForceful",
  "dxInterrogationFreeze",
  "dxInterrogationMild",
  "dxInterrogationRough",
  "dxInterrogationShock",
  "dxIvexEnthrallment",
  "dxIvexExtraction",
  "dxIvexPunishment",

  // Keywords unlocked
  "kwAntiMagic",
  "kwDream",
  "kwEndgame",
  "kwGravity",
  "kwItch",
  "kwIvex",
  "kwKelvin",
  "kwKopic",
  "kwMcFundamental",
  "kwMcInhibition",
  "kwMcRepression",
  "kwMcSubstitution",
  "kwMica",
  "kwNackle",
  "kwOil",
  "kwPearson",
  "kwPevhin",
  "kwPyron",
  "kwSprite",
  "kwTigerKeratin",
  "kwTigerMyth",
  "kwYounger",

  // Nero endings unlocked
  "nxBroken",
  "nxCagedHarsh",
  "nxCagedMild",
  "nxTamedHarsh",
  "nxTamedMild",
]);

/**
 * `_m` is a JS global that's a proxy for State.metadata.
 * 
 * The proxy is also installed as the SugarCube temp var `_m`,
 * so that the expression `_m.var` can be used anywhere.
 * 
 * Note, get is somewhat expensive, since it always reads and
 * deserializes from localStorage. Bulk read operations should maybe
 * filter State.metadata.entries() instead.
 */
window._m = new Proxy({}, {
  deleteProperty(_, prop) {
    checkIsKnown(prop, 'delete');
    State.metadata.delete(prop);
  },
  get(_, prop) {
    checkIsKnown(prop, 'get');
    return State.metadata.get(prop);
  },
  set(_, prop, value) {
    checkIsKnown(prop, 'set');
    if (value == null || value === false) {
      State.metadata.delete(prop);
    } else {
      State.metadata.set(prop, value);
    }
    return value;
  },
});

function checkIsKnown(name, verb) {
  if (unsavedVars.has(name)) return;
  if (savedVars.has(name)) return;
  throw new Error(`${verb} of nonexistent meta var _m.${name}`);
}

function metaLoad(save) {
  if (!save.metadata) return;
  for (const [key, value] = Object.entries(save.metadata)) {
    if (!savedVars.has(key)) continue;
    if (!value) continue;
    if (!_m[key]) {
      _m[key] = value;
      // XXX announce the unlock
    }
  }
}

function metaSave(save) {
  save.metadata ||= {};
  const entries = State.metadata.entries();
  for (const [key, value] of entries) {
    if (savedVars.has(key)) {
      save.metadata[key] = value;
    }
  }
}

function metaInit() {
  $(document).on(":passageinit", () => {
    State.temporary.m = _m;
  });
  Save.onLoad.add(metaLoad);
  Save.onSave.add(metaSave);
}

metaInit();

<</script>>
