:: g0init Nero Keywords [inclusion] {"position":"1100,1600","size":"100,100"}
<<script>>

const nkRecord = {
  nkAntiMagic: {
    title: "Anti-Magic Fields",
    passages: [
      "n1s Anti-magic 1",
      "n1s Anti-magic 2",
    ],
  },
  
  nkDream: {
    title: "Dream Crystals",
    passages: [
      "n1x Dream Crystals 1",
      "n1x Dream Crystals 2",
    ],
  },

  nkEndgame: {
    title: "Nero's Endgame",
    passages: [
      "n1s Endgame Info 1",
      "n1s Endgame Info 2",
    ],
  },
  
  nkGravity: {
    title: "Gravity Crystals",
    passages: [
      "n1x Gravity Crystals 1",
      "n1x Gravity Crystals 2",
    ],
  },
  
  nkItch: {
    title: "Superb Itch",
    passages: [
      "n1s Itch 1",
      "n1s Itch 2",
      "n1s Itch 3",
    ],
  },
  
  nkIvex: {
    title: "Ivex (the Magnificent)",
    passages: [
      "n1cn Ivex Desc",
    ],
  },
  
  nkKelvin: {
    title: "Kelvin the Elder",
    passages: [
      "n1x Kelvin 1",
      "n1x Kelvin 2",
      "n1x Kelvin 3",
      "n1x Kelvin 4",
      "n1x Kelvin 5",
      "n1x Kelvin 6",
      "n1x Kelvin 7",
    ],
  },
  
  nkKopic: {
    title: "Kopic Wands",
    passages: [
      "n2x Kopic",
    ],
  },
  
  nkMcBasics: {
    title: "Mind Control (Basics)",
    passages: [
      "n1cr Mind Control",
    ],
  },
  
  nkMcInhibition: {
    title: "Mind Control (Inhibition)",
    passages: [
      "n1cr Inhibition 1",
    ],
  },
  
  nkMcRepression: {
    title: "Mind Control (Repression)",
    passages: [
      "n1cr Repression 1",
    ],
  },
  
  nkMcSubstitution: {
    title: "Mind Control (Substitution)",
    passages: [
      "n1cr Substitution 1",
    ],
  },
  
  nkMica: {
    title: "Mica Teboren",
    passages: [
      "n1p Mica Extra 1",
      "n1p Mica Extra 2",
      "n1p Mica Extra 3",
    ],
  },
  
  nkNackle: {
    title: "Nackle's Poltergeist Device",
    passages: [
      "n1x Nackle Info 1",
      "n1x Nackle Info 2",
    ],
  },
  
  nkOil: {
    title: "Oil of Dragons",
    passages: [
      "n1s Oil Info",
    ],
  },
  
  nkPearson: {
    title: "Pearson's Hangover Cantrip",
    passages: [
      "n1a Hangover Info",
    ],
  },
  
  nkPevhin: {
    title: "Lord Pevhin and Lady Temesca",
    passages: [
      "n1p Barbs Fast 3",
      "n1p Barbs Fast 4",
      "n1p Barbs Fast 5",
    ]
  },
  
  nkPyron: {
    title: "Pyron Nodes",
    passages: [
      "n1s Pyron Node",
    ],
  },
  
  nkSprite: {
    title: "Magic Sprites",
    passages: [
      "n1s Sprite Info 1",
      "n1s Sprite Info 2",
    ],
  },
  
  nkTigerKeratin: {
    title: "Strange Tiger (Keratin)",
    passages: [
      "n1p Barbs Slow 4",
      "n1p Barbs Slow 5",
      "n1p Barbs Slow 6y1",
      "n1p Barbs Slow 6y2",
    ],
  },
  
  nkTigerMyth: {
    title: "Strange Tiger (Myth)",
    passages: [
      "n1p Barbs Slow 4",
      "n1p Barbs Slow 5",
      "n1p Barbs Slow 6n1",
      "n1p Barbs Slow 6n2",
    ],
  },
  
  nkYounger: {
    title: "Younger's Escape",
    passages: [
      "n1s Younger Info 1",
      "n1s Younger Info 2",
      "n1s Younger Info 3",
    ],
  },
};

MT.nkCount = () => {
  const V = State.variables;
  const mr = MT.mdRecord();
  let unlocked = 0;
  const keys = Object.keys(nkRecord);
  for (const key of keys) {
    if (mr[key]) unlocked++;
  }
  const reveal = V.n0_playerLeftStudyWithMirror || unlocked === keys.length;
  const total = reveal ? keys.length : "?";
  let mkp = "<<nobr>>";
  mkp += `(${unlocked} of ${total})`;
  mkp += "<</nobr>>";
  return mkp;
};

MT.nkList = () => {
  const V = State.variables;
  const T = State.temporary;

  const keys = Object.keys(nkRecord);
  keys.sort((a, b) => {
    const at = nkRecord[a].title;
    const bt = nkRecord[b].title;
    return at < bt ? -1 : at > bt ? +1 : 0;
  });

  const revealAll = V.n0_playerLeftStudyWithMirror || T.lockpick;
  const mr = MT.mdRecord();
  let anyShown = false;

  let mkp = "<<nobr>>";
  for (const key of keys) {
    if (!revealAll && !mr[key]) continue;
    anyShown = true;
    mkp += `<<arc-ending ${mr[key]}`;
    mkp += ` [\[${nkRecord[key].title}|n0a Nero Keyword]]`;
    mkp += ` "" "$t_choice = '${key}'">>`;
    mkp += `<</arc-ending>>\n`;
  }
  if (!anyShown) {
    mkp += `No keywords found yet.`;
  }
  mkp += "<</nobr>>";
  return mkp;
};

MT.nkShow = key => {
  State.temporary.notesVariant = key;
  const kw = nkRecord[key];
  if (kw == null) {
    throw new Error(`Unknown keyword ${key}`);
  }
  let mkp = "<<nobr>>";
  mkp += `<div class=ui-title>${kw.title}</div>\n`;
  mkp += `<hr class=archive-head>\n`;
  for (let i = 0; i < kw.passages.length; i++) {
    if (i !== 0) mkp += "<hr class=archive-sep>\n";
    mkp += `<<arc-include "${kw.passages[i]}">>\n`;
  }
  mkp += "<</nobr>>";
  return mkp;
}

/**
 * <<kw-unlock-soon kwName>>
 * If kwName is locked, set it to unlock at the next kw-announce.
 */
Macro.add("kw-unlock-soon", {
  handler: function() {
    const [key] = this.args;
    const kw = nkRecord[key];
    if (kw == null) {
      throw new Error(`kw-unlock-soon ${key} not found`);
    }
    const V = State.variables;
    if (!MT.mdGet(key)) {
      if (V.t_kwAnnounce != null && V.t_kwAnnounce !== key) {
        throw new Error(`conflicting kwAnnounce ${key} ${V.t_kwAnnounce}`);
      }
      V.t_kwAnnounce = key;
      State.temporary.kwUnlocking = true;
    }
  }
});

/**
 * <<kw-announce>>
 * If a kw unlock is pending, do it, and announce it.
 */
Macro.add("kw-announce", {
  handler: function() {
    const V = State.variables;
    const key = V.t_kwAnnounce;
    if (key == null) return;
    
    delete V.t_kwAnnounce;
    const kw = nkRecord[key];
    if (kw == null) {
      throw new Error(`kw-announce ${key} not found`);
    }

    MT.mdSet(key, 1);

    $(this.output).wiki(
      `<meta-text>\
        The Archives have unlocked Keyword: ${kw.title}.\
      </meta-text>\
      ?P`);
  }
});

function nkInit() {
  for (const key of Object.keys(nkRecord)) {
    MT.mdDefSaved(key);
  }

  $(document).on(":passageend", () => {
    const T = State.temporary;
    const V = State.variables;
    const noreturn = tags().includes("noreturn");
    if (!T.kwUnlocking && V.t_kwAnnounce != null && !noreturn) {
      MT.fail(`missing kw-announce for ${V.t_kwAnnounce}`);
    }
  });
}

nkInit();

<</script>>\
