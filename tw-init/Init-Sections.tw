:: Init Sections [inclusion] {"position":"2825,1150","size":"100,100"}
<<script>>

const Use = Symbol("Use");

// Passages are grouped into sections by a prefix in their title.
// - Prefix should start with a lowercase letter.
// - Prefix can contain lowercase letters and numbers.
// - Prefix should end with `-` or space.
// - Try to use prefixes that are short tags that are not words
//   and not used in any other way.
//   This makes it easy to search for all occurrences of passage titles.

// Each section can have `vars` for state meaningful in that section.
// - The value `Use` means the passage should vary on that state var.
// - A regex value means, if the passage source matches the regex,
//   the passage should vary on that state var.
// - `false` means the state var can be undefined, null, or false.
// - Any other value means the state var should be exactly that value.
// - Usually don't need to specify a var is false in sections before
//   it gets set.
// - Probably want to specify a var is false if it can become false,
//   to verify that all paths do set it false.

const sectionDefs = {

  // Passages not specific to a character
  mt: {},

  // Nero passages that aren't part of the story
  n0: {},

  // Nero 1F intro
  n1a: {
    vars: {
      n1_mageSight: Use,
    }
  },

  // Nero convo, neutral mood
  n1cn: {
    vars: {
      n1_abused: Use,
      n1_mageSight: Use,
      n1_naked: Use,
    }
  },

  // Nero convo, Ivex receptive
  n1cr: {
    vars: {
      n1_abused: Use,
      n1_mageSight: Use,
      n1_naked: Use,
      t_ivexReceptive: true,
    }
  },

  // Nero convo, subby mood
  n1cs: {
    vars: {
      // n1_abused: subby usually dominates
      n1_mageSight: Use,
      n1_naked: true,
      n1_subby: true,
      t_ivexReceptive: true,
    }
  },

  // Nero convo, transition to candle
  n1cx: {
    vars: {
      n1_abused: Use,
      n1_mageSight: Use,
      n1_naked: Use,
      n1_subby: Use,
      n1_tough: Use,
      t_ivexReceptive: false,
    }
  },

  // Nero candle lit
  n1d: {
    vars: {
      n1_abused: Use,
      n1_candleLit: true,
      n1_mageSight: Use,
      n1_naked: Use,
      n1_subby: Use,
      n1_tough: Use,
      t_ivexReceptive: false,
    }
  },
  
  // Nero candle horny
  n1e: {
    vars: {
      n1_abused: Use,
      n1_candleHorny: true,
      n1_candleLit: true,
      n1_mageSight: Use,
      n1_naked: true,
      n1_subby: Use,
      n1_tough: Use,
      t_ivexReceptive: false,
    }
  },

  // Nero being clever
  n1f: {
    vars: {
      n1_naked: true,
    }
  },

  // Nero barbs choice
  n1p: {
    vars: {
      n1_candleHorny: false,
      n1_mageSight: false,
    }
  },

  // Nero magic/sprite
  n1s: {
    vars: {
      // make sure Ivex is wearing mask when candle lit
      n1_candleLit: /ivex/im,
      n2_free: false,
      n2_ivexGone: Use,
    }
  },

  // Nero looking
  n1x: {
    vars: {
      n1_candleHorny: false,
      // make sure Ivex is wearing mask when candle lit
      n1_candleLit: /ivex/im,
      n1_mageSight: Use,
      n2_free: Use,
      n2_ivexGone: Use,
    }
  },

  // Nero horny looking
  n1y: {
    vars: {
      n1_candleHorny: true,
      n1_candleLit: true,
      n1_mageSight: Use,
      n1_naked: true,
      n2_ivexGone: Use,
    }
  },

  // Nero 1F alone intro
  n2a: {
    vars: {
      n1_candleHorny: false,
      n1_candleLit: false,
      n1_mageSight: Use,
      n1_naked: true,
      n2_ivexGone: true,
      t_ivexReceptive: false,
    }
  },

  // Nero alone with candle
  n2b: {
    vars: {
      n1_candleLit: true,
      n1_mageSight: Use,
      n1_naked: true,
      n2_ivexGone: true,
      t_ivexReceptive: false,
    }
  },

  // Nero escaping cross
  n2c: {
    vars: {
      n1_mageSight: Use,
      n1_naked: true,
      n2_ivexGone: true,
      t_ivexReceptive: false,
    }
  },

  // Nero free on 1F
  n2f: {
    vars: {
      n1_mageSight: Use,
      n1_naked: true,
      n2_extraHorny: Use,
      n2_ivexGone: true,
      n2_tooClever: Use,
      t_ivexReceptive: false,
    }
  },

  // Nero looking while free
  n2x: {
    vars: {
      n1_mageSight: Use,
      n1_naked: true,
      n2_extraHorny: Use,
      n2_ivexGone: true,
      n2_tooClever: Use,
      t_ivexReceptive: false,
    }
  },

  // Nero 2F sketch
  n3a: {
    vars: {
      n1_mageSight: Use,
      n1_naked: true,
      n2_extraHorny: Use,
      n2_ivexGone: true,
      t_ivexReceptive: false,
    }
  },

  // Nero 1F endings
  n9a: {
    vars: {
      n1_naked: true,
    }
  },

  // Nero 2F endings
  n9e: {},

  // Nero escaped endings
  n9x: {},

  // Passages without a section tag
  other: {},
};

/** Returns section name of passageTitle. */
MT.sectionOf = (passageTitle) => {
  const re = /^([a-z][a-z0-9]+)[- ]/;
  const m = re.exec(passageTitle);
  return m ? m[1] : "other";
};

/** Returns section name of current passage. */
MT.sectionHere = () => MT.sectionOf(State.passage);

/** Verifies sections are defined. */
function checkSections() {
  if (!setup.debug) return;

  const reported = new Set();
  Story.lookup().forEach(p => {
    const sect = MT.sectionOf(p.title);
    if (!sectionDefs[sect] && !reported.has(sect)) {
      console.error(`[\[${p.title}]] section ${sect} not defined`);
      reported.add(sect);
    }
  });
}

/** Verifies current state is correct for this section. */
function checkSectionState(quietly) {
  // Note: incoming state, not active state
  const _s0 = State.current.variables;

  // TODO: remove this temp hack when restart is fixed
  if (_s0.t_restarting) return true;

  const sect = MT.sectionHere();
  const vars = sectionDefs[sect].vars;
  if (!vars) return true;

  let allOk = true;
  for (const vn of Object.keys(vars)) {
    const val = vars[vn];
    if (val === Use || val instanceof RegExp) continue;

    const ok = _s0[vn] === val || (val === false && _s0[vn] == null);
    if (!ok) {
      if (quietly) return false;
      allOk = false;
      MT.fail(`${vn} should be ${val} in ${sect}; currently ${_s0[vn]}`);
    }
  }
  return allOk;
}

checkSections();
$(document).on(":passageend", () => checkSectionState());

<</script>>
