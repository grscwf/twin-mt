:: n1s-F Zero Bound {"position":"6750,3725","size":"100,100"}
<<nobr>>
<<vi-always n1_magicPhase `MP_wantPass`>>
<<vi-always n2_free false>>
<<vi-ignore n1_candleLit>>
<<vi-ignore n2_ivexGone>>
<<em-assert !$n1_candleHorny || $t_ivexNear || $n2_ivexGone>>

Unexpectedly, the Sprite whispers,
<span class=sprite-q>"Please say your password, ?master"</span>

?P
Nero is delighted! He has another chance!
Apparently,
<span class=sprite-q>"zero tries remaining"</span>
does not actually
prevent him from trying another password.

?P
This is actually a common problem students have
when instructing a Sprite.
Telling a Sprite a sequence of steps is straightforward,
but once the instructions involve steps that repeat
or vary under different conditions,
it becomes difficult to instruct the Sprite
to perform an intended task correctly
without testing the Sprite and scolding it for its mistakes.

?P
And Ivex is clearly not very skilled at instructing Sprites.
What a lucky break!

?P
Since the Sprite did not stop asking at zero,
it's quite likely that it will <em>never</em> stop asking.
This mistake will allow Nero to make as many guesses
as he wants!

?P
$t_afterAction

<</nobr>>
