:: n1s Guess Password [mt-ready] {"position":"4500,800","size":"100,100"}
<<nobr>>
<<vi-ignore n_candleLit>>
<<vi-ignore n_ivexGone>>

<<include [[n1s Guess Script]]>>

<<set _tried = JSON.parse($n_passTried || "[]")>>
<<set _oneLeft = _tried.length === 2>>
<<set _zeroLeft = _tried.length === 3>>

<<if $n_candleHorny>>
  The flirtatious Sprite
  is waiting for Nero to unlock
  its promised delights with a password.
<<else>>
  The Sprite is asking for Ivex's password.
  One last step, and then Nero can use Nackle's Device.
<</if>>

<<if _tried.length > 0>>
  ?P
  The wolf has already tried <<= _listFailed()>>
<</if>>

?P
<<if $n_candleHorny>>
  He knows many fine passwords.
  He carefully considers each one,
  imagining the Sprite's delight or dismay in response.

  ?P
  One of these must surely be a suitable gift for affirming their love.
  But perhaps there are other, better passwords to be
  found somewhere in this room?

<<else>>

  <<switch _tried.length>>
  <<case 1>>
    The Sprite will allow two more guesses.
    ?P
    Nero does not really know much about
    <<if $n_subby && !$n_ivexGone>>
      Ivex,
    <<else>>
      Ivex (and does not really <em>want</em> to know more),
    <</if>>
    but the wolf has already learned a few things that suggest
    passwords that the panther might use.
    Nero is pretty sure that the password is one of these.
    ?P
    Well, if it isn't one of these,
    it's definitely
    <<mt-seen $n_dimStudy>>
      <<mta "n1x Study">>
        something in this study
      <</mta>>.
    <</mt-seen>>
    Ivex is not a complicated panther.
    ?P
    Nero knows this judgment of Ivex is somewhat of a fiction.
    If Ivex <em>is</em> a complicated panther,
    then guessing his password is hopeless,
    and there's no point in trying.
    So the wolf might as well <em>assume</em> that the panther is a simpleton,
    for the purpose of this password-guessing exercise.
    ?P
    And if it doesn't work? No great loss.
    There will be
    <<if $n_subby && !$n_ivexGone>>
      other magics to explore.
    <<else>>
      some other way to escape.
    <</if>>

  <<case 2>>
    Unfortunately, Nero only has one guess left.
    He finds himself filled with doubt.
    This is not an <em>important</em> decision.
    He's pretty sure he
    <<if $n_subby && !$n_ivexGone>>
      doesn't <em>need</em> Nackle.
    <<else>>
      can escape without Nackle.
    <</if>>
    But it feels like this is a challenge he <em>should</em>
    be able to solve. Failing this will confirm his worst fears
    about whether his successes have been skill or merely luck.
    ?P
    He considers the passwords that were wrong, and the passwords
    he hasn't yet tried. Each one seems like it could be right,
    but also obviously <em>not.</em>
    He wonders again if there's something in this
    <<mt-seen $n_dimStudy>>
      <<mta "n1x Study">>room<</mta>>
    <</mt-seen>>
    that might reveal a choice that's definitely, obviously correct.
    ?P
    Well, he can't remain paralyzed by doubt forever.
    Not making a guess is also a choice. A bad choice.
    Maybe he should just make his best guess now.

  <<case 3>>
    Nero is relieved that the Sprite is allowing him to continue
    to guess, despite having
    <em>zero tries remaining.</em>
    Hooray for the
    incompetence of villains.
    ?P
    The error in the Sprite's instructions will likely
    allow Nero to make unlimited guesses.
    <<if $n_ivexGone>>
      ?P
      Well, the flickering red candle imposes a deadline,
      but the Sprite itself does not.
    <<else>>
      So he can leisurely try each possibility, as long as
      he can slip them past Ivex's attention.
    <</if>>

  <<default>>
    <<run throw new Error(`unexpected passTried ${$n_passTried}`)>>
  <</switch>>
<</if>>

?P
<ul class=actions>
  <<for _pw range _toTry>>
    <<capture _pw>>
      <<script>>
        const T = State.temporary;
        T.code = `$n_passToTry = '${T.pw}'`;
      <</script>>
      <<mtl _sayPassword _code>>
        Try <<= _describe(_pw)>>.
      <</mtl>>
    <</capture>>
  <</for>>
  <li>$n_afterLook</li>
</ul>
<</nobr>>
