:: n1s Sprite [mt-ready inclusion] {"position":"4450,600","size":"200,100"}
<<nobr>>

<<run
  if (MP_exitingHold === $n_magicPhase) {
    const tried = JSON.parse($n_passTried || "[]");
    if (tried.length >= 4) {
      $n_magicPhase = MP_lockedOut;
    } else {
      $n_magicPhase = MP_wantPass;
    }
  }
  /* note, _canCast is true only when subby>glitch or candle>glitch>horny */
  _canCast = !MT.neroDidCast();
>>

<<if $n_candleHorny>>
  <<switch MT.pick([0, 1, 2])>>
  <<case 0>>
    The burr in the Sprite's voice leaves an
    unbearable flutter in Nero's ear.
  <<case 1>>
    The Sprite is a sexy, androgynous voice
    <<= $n_spriteQuiet ? "whispering" : "reverberating">>
    in Nero's head.
  <<case 2>>
    The Sprite ?sprSpeaks slowly in Nero's ear, with erotic urgency lurking
    in every syllable.
  <</switch>>
<<else>>
  The Sprite
  <<if MP_contact === $n_magicPhase>>
    reminds Nero,
  <<elseif $n_spriteSaidPhase === $n_magicPhase>>
    repeats in Nero's ear,
  <<else>>
    ?sprSpeaks in Nero's ear.
  <</if>>
<</if>>

<<switch $n_magicPhase>>
<<case `MP_wantDevice`>>
  <<include [[n1s Sprite Want Device]]>>

<<case `MP_wantName`>>
  <<include [[n1s Sprite Want Name]]>>


<<case `MP_wantTouch`>>
  <span class=sprite-q>"Please touch my hole, ?master"</span>
  <<if _patience <= 0>>
    /* nothing */
  <<elseif !$n_helpTouchAsked>>
    <<if $n_candleHorny>>
      The wolf is fascinated by thoughts of where this hole might be.
    <<else>>
      The wolf wonders where this hole might be.
    <</if>>
    <<run
      $n_magicAction =
        `<<mtl [[n1s Help Touch]]>>`
        + `Ask the Sprite, "Please, help!"`
        + `<</mtl>>`;
    >>
  <<elseif $n_candleHorny>>
    The wolf would love to. Why doesn't the Sprite understand that he
    <<if _canCast>>
        wants it to help?
    <<else>>
      <em>can't</em> without its help?
    <</if>>
  <<elseif $n_ivexGone>>
    The wolf has no way to touch any hole,
    now that Ivex is gone.
    The Sprite's pestering is annoying.
  <<else>>
    There must be some way to trick Ivex into touching the right hole.
  <</if>>

  <<if _patience > 0 && _canCast>>
    <<if $n_candleHorny>>
      He considers casting a spell he should cast a spell that will let
      him approach the Sprite.
      <<run
        $n_magicAction +=
          `<<mtl [[n1s Cast Horny 1]]>>Cast a simple escape spell.<</mtl>>`;
      >>
    <<elseif $n_ivexGone>>
      XXX
    <<else>>
      <<vi-always n_subby true>>
      XXX
    <</if>>
  <</if>>

<<case `MP_wantPass`>>
  <span class=sprite-q>"Please say your password, ?master"</span>
  <<if _patience > 0>>
    ?P
    <<switch JSON.parse($n_passTried || "[]").length>>
    <<case 1>>
      <<if $n_candleHorny>>
        Nero remembers the Sprite has set firm boundaries for this
        courtship. He has only two more chances to discover the
        password to its heart.
      <<else>>
        Nero has two guesses remaining.
        Not as many as he'd like, but better than nothing.
      <</if>>
    <<case 2>>
      <<if $n_candleHorny>>
        Nero is feeling desperate. Opportunity is slipping through his
        grasp. He has only one more chance to unlock the Sprite's love.
      <<else>>
        Nero only has one guess remaining.
        He'd better make it a good one.
      <</if>>
    <<case 3>>
      <<if $n_candleHorny>>
        Nero feels embarrassment. He has zero tries remaining.
        Is the Sprite mocking him? Well, he will keep on trying anyway.
      <<else>>
        Nero now has zero guesses remaining?
        It probably means there is not actually
        a limit to the number of guesses.
      <</if>>
    <<default>>
      <<run throw new Error(`bug: passTried length ${$n_passTried}`)>>
    <</switch>>
    <<run
      $n_magicAction =
        `<<mtl [[n1s Guess Password]]>>Guess a password.<</mtl>>`;
    >>
  <</if>>

  <<if _patience > 0 && _canCast>>
    <<if $n_candleHorny>>
      XXX
    <<elseif $n_ivexGone>>
      XXX
    <<else>>
      <<vi-always n_subby true>>
      XXX
    <</if>>
  <</if>>

<<case `MP_onHold`>>
  <<include [[n1s On Hold]]>>

<<case `MP_contact`>>
  <<include [[n2f Use Lance]]>>

<<case `MP_lockedOut`>>
  <<include [[n1s Locked Out]]>>

<<default>>
  <<run throw new Error(`BUG: sprite magicPhase ${$n_magicPhase}`)>>
<</switch>>

<<run
  $n_spriteSaidPhase = $n_magicPhase;
>>
<</nobr>>\
