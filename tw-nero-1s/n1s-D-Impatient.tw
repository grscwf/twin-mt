:: n1s/D Impatient {"position":"6575,3775","size":"100,100"}
<<nobr>>
<<vi-always n2_free false>>
<<em-assert $n2_ivexGone || $t_ivexNear || !$n1_candleHorny>>

<style>
  .impatient-overrun {
    letter-spacing: -1px;
    margin-right: .4em;
    word-spacing: -2px;
  }
</style>

<<em-assert $n1_magicPhase === MP_onHold>>

<<script>>
  const V = State.variables;
  const T = State.temporary;
  V.n1_passOnHold || (V.n1_passOnHold = "placeholder for testing");
  T.pw = V.n1_passOnHold.replace(/^#/, "");
  V.n1_passTried || (V.n1_passTried = []);
  if (!V.n1_passTried.includes(V.n1_passOnHold)) {
    V.n1_passTried.push(V.n1_passOnHold);
  }
<</script>>

<<switch $n1_passTried.length>>
<<case 1>>
    <<if $n1_candleHorny>>
        Nero whines, "Please, quiet!"
    <<else>>
        Nero whispers, "Please, quiet!"
    <</if>>

    <<if !$n2_ivexGone>>
        ?P
        TODO ivexNear.
        TODO candleLit-mask.
        Ivex, something lewd
    <</if>>

    <<set $n1_spriteQuiet = true>>
    ?P
    The Sprite whispers in Nero's ear,
    <span class=sprite-q>"Quiet mode activated, ?master"</span>

    ?P
    Nero regrets.

<<case 2>>
    <<if $n1_candleHorny>>
        Nero whines, "Please, hurry up!"
    <<else>>
        Nero whispers, "Please, hurry up!"
    <</if>>

    <<if !$n2_ivexGone>>
        ?P
        TODO ivexNear.
        TODO candleLit-mask.
        Ivex, something horny.
    <</if>>

    ?P
    Sprite, ok, changing music speed

    ?P
    Nero regrets.

<<case 3>>
    <<if $n1_candleHorny>>
        Nero whines, "Please, stop the music!"
    <<else>>
        Nero whispers, "Please, stop the music!"
    <</if>>

    <<if !$n2_ivexGone>>
        ?P
        TODO ivexNear.
        TODO candleLit-mask.
        Ivex, something horny.
    <</if>>

    ?P
    Sprite, ok, switching music to "Stop the Music, ?master"

    ?P
    Nero regrets.

<<default>>
    <<run throw new Error(`BUG: impatient passTried ${$n1_passTried.length}`)>>
<</switch>>

?P
A moment later, the Sprite says,
<span class=sprite-q>"<em><<= _pw>></em> is not the correct password.</span>
XXX sometimes "that was last month's password"
<<switch $n1_passTried.length>>
<<case 1>>
    <span class=sprite-q>You have two tries remaining, ?master"</span>
    <<set $n1_magicPhase = MP_wantPassword>>
<<case 2>>
    <span class=sprite-q>You have one <span class=impatient-overrun>
        look up the singular form of the
        verb tries and use it here and remind me to figure out how
        to bind the Sprite to my voice
        in case I ever capture a mage that knows how
        to activate it
    </span>
    remaining, ?master"</span>
    <<set $n1_magicPhase = MP_wantPassword>>
<<case 3>>
    XXX zero tries remaining
    <<set $n1_magicPhase = MP_wantPassword>>
<<case 4>>
    XXX no more tries
    <<set $n1_magicPhase = MP_lockedOut>>
<</switch>>
<</nobr>>

$t_afterAction
